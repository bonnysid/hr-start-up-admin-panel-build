{"version":3,"file":"static/js/897.0653f19f.chunk.js","mappings":"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","sources":["pages/Dialogs/styled.ts","pages/Dialogs/DialogItem/styled.ts","pages/Dialogs/DialogItem/index.tsx","pages/Dialogs/ActiveDialog/styled.ts","pages/Dialogs/Message/styled.ts","pages/Dialogs/Message/index.tsx","pages/Dialogs/ActiveDialog/index.tsx","pages/Dialogs/index.tsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  grid-row-gap: 24px;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 24px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  border: 1px solid ${COLORS.lightGray40};\r\n  background: ${COLORS.white};\r\n  border-radius: 5px;\r\n`;\r\n\r\nexport const ScrollableContent = styled.div<{ hasActive?: boolean }>`\r\n  max-width: ${({ hasActive }) => hasActive ? '400px' : '100%'};\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n  }\r\n`;\r\n\r\nexport const DialogsContainer = styled.div<{ hasActive?: boolean }>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: ${({ hasActive }) => hasActive ? '400px' : '100%'};\r\n  width: 100%;\r\n  min-height: 100%;\r\n  height: fit-content;\r\n  border-right: ${({ hasActive }) => hasActive ? `1px solid ${COLORS.lightGray40}` : 'none'};\r\n  background: ${COLORS.white};\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const EmptyText = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\nimport { TextShorter } from '@src/components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  gap: 12px;\r\n  cursor: pointer;\r\n  height: fit-content;\r\n  transition: background-color .3s;\r\n  padding: 10px;\r\n  overflow: hidden;\r\n  \r\n  &:hover {\r\n    background-color: ${COLORS.blue20};\r\n  }\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 5px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  gap: 5px;\r\n`;\r\n\r\nexport const Text = styled(TextShorter)`\r\n  white-space: nowrap;\r\n  color: ${COLORS.gray90};\r\n  min-width: 0;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const NewMessages = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 20px;\r\n  min-width: 20px;\r\n  height: 20px;\r\n  min-height: 20px;\r\n  background-color: ${COLORS.blue60};\r\n  color: ${COLORS.white};\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const Title = styled(TextShorter)`\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const Date = styled.div`\r\n  color: ${COLORS.gray90};\r\n`;\r\n","import { FC } from 'react';\r\nimport { IDialogListItem } from '@src/api/Dialogs/models';\r\nimport * as ST from './styled';\r\nimport { Avatar, AvatarSize, TextShorter } from '@src/components';\r\nimport { getTimeMessage } from '@src/utils/date';\r\n\r\ninterface IProps {\r\n  dialog: IDialogListItem;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const DialogItem: FC<IProps> = ({ dialog, onClick }) => {\r\n  return (\r\n    <ST.Wrapper onClick={onClick}>\r\n      <Avatar\r\n        userId={dialog.user.id}\r\n        firstName={dialog.user.firstName}\r\n        lastName={dialog.user.lastName}\r\n        src={dialog.user.avatar}\r\n        size={AvatarSize.XXXL}\r\n      />\r\n      <ST.Content>\r\n        <ST.Header>\r\n          <ST.Title tooltip>\r\n            {dialog.user.lastName} {dialog.user.firstName} ({dialog.user.email})\r\n          </ST.Title>\r\n\r\n          <ST.Date>\r\n            {getTimeMessage(dialog.lastMessage.updatedAt)}\r\n          </ST.Date>\r\n        </ST.Header>\r\n        <ST.Header>\r\n          <ST.Text>\r\n            {dialog.lastMessage.text}\r\n          </ST.Text>\r\n          {Boolean(dialog.unreadableMessages) && (\r\n            <ST.NewMessages>\r\n              {dialog.unreadableMessages}\r\n            </ST.NewMessages>\r\n          )}\r\n        </ST.Header>\r\n      </ST.Content>\r\n    </ST.Wrapper>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\nimport { Icon } from '@components/Icon';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n  width: 100%;\r\n  height: fit-content;\r\n  min-height: 100%;\r\n  padding: 10px;\r\n`;\r\n\r\nexport const ScrollableContent = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  \r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n  }\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-top: 1px solid ${COLORS.lightGray40};\r\n`;\r\n\r\nexport const SendIcon = styled(Icon)`\r\n  cursor: pointer;\r\n  color: ${COLORS.gray60};\r\n  transition: color .3s;\r\n  \r\n  &:hover {\r\n    color: ${COLORS.blue60};\r\n  }\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid ${COLORS.lightGray40};\r\n  box-shadow: 0 7px 15px rgba(0,0,0,.05);\r\n`;\r\n","import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\n\r\nexport const Wrapper = styled.div<{ isOwn: boolean }>`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: ${({ isOwn }) => isOwn ? 'flex-end' : 'flex-start'};\r\n`;\r\n\r\nexport const Content = styled.div<{ isOwn: boolean }>`\r\n  display: flex;\r\n  align-items: flex-end;\r\n  gap: 10px;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  padding: 8px 8px 4px 8px;\r\n  max-width: calc(50% - 10px);\r\n  border-radius: 5px;\r\n  background-color: ${({ isOwn }) => isOwn ? COLORS.blue30 : COLORS.lightGray30};\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  padding-bottom: 5px;\r\n`;\r\n\r\nexport const Date = styled.div`\r\n  color: ${COLORS.gray90}\r\n`;\r\n","import { FC, useMemo } from 'react';\r\nimport { IMessage } from '@src/api/Dialogs/models';\r\nimport * as ST from './styled';\r\nimport { getTimeMessage } from '@src/utils/date';\r\nimport { useAuth } from '@providers/AuthProvider';\r\n\r\ninterface IProps {\r\n  message: IMessage;\r\n}\r\n\r\nexport const Message: FC<IProps> = ({ message }) => {\r\n  const { user } = useAuth();\r\n\r\n  const isOwn = useMemo(() => message.user.id === user?.id, [message, user]);\r\n\r\n  return (\r\n    <ST.Wrapper isOwn={isOwn}>\r\n      <ST.Content isOwn={isOwn}>\r\n        <ST.Text>{message.text}</ST.Text>\r\n        <ST.Date>{getTimeMessage(message.updatedAt)}</ST.Date>\r\n      </ST.Content>\r\n    </ST.Wrapper>\r\n  );\r\n}\r\n","import { FC, useEffect, useMemo, useState } from 'react';\r\nimport { IUser } from '@src/api/Users/models';\r\nimport * as ST from './styled';\r\nimport { AppLoader, Avatar, AvatarSize, Button, Textarea } from '@src/components';\r\nimport { Icon, IconSize } from '@components/Icon';\r\nimport { IMessage, ISocketMessage } from '@src/api/Dialogs/models';\r\nimport { toastError } from '@src/utils/toast';\r\nimport { DialogsApi } from '@src/api/Dialogs/DialogsApi';\r\nimport { Message } from '@pages/Dialogs/Message';\r\nimport { SocketApi } from '@src/api/SocketApi/SocketApi';\r\nimport { MessageEvents } from '@src/api/SocketApi/models';\r\nimport { useMessageCallBack } from '@src/hooks';\r\n\r\ninterface IProps {\r\n  dialogId: string;\r\n  user: IUser;\r\n  onBack?: () => void;\r\n}\r\n\r\nexport const ActiveDialog: FC<IProps> = ({ dialogId, user, onBack }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [messages, setMessages] = useState<IMessage[]>([]);\r\n  const [message, setMessage] = useState('');\r\n\r\n  const getDialog = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const res = await DialogsApi.fetchDialogInfo(dialogId);\r\n\r\n      setMessages(res.data.messages);\r\n    } catch (e) {\r\n      toastError(e);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    SocketApi.sendMessage({\r\n      dialogId,\r\n      text: message,\r\n    });\r\n    setMessage('');\r\n  }\r\n\r\n  useMessageCallBack((message: string) => {\r\n    const parsedMessage = JSON.parse(message) as ISocketMessage;\r\n\r\n    if (parsedMessage.event === MessageEvents.MESSAGE && parsedMessage.dialogId === dialogId) {\r\n      setMessages(prev => [...prev, parsedMessage]);\r\n      SocketApi.readMessage({ messageId: parsedMessage.id });\r\n    }\r\n  }, [dialogId]);\r\n\r\n  useEffect(() => {\r\n    getDialog();\r\n  }, [dialogId]);\r\n\r\n  const renderedContent = useMemo(() => {\r\n    if (isLoading) {\r\n      return <AppLoader/>\r\n    }\r\n\r\n    if (!messages.length) {\r\n      return 'Нет сообщений'\r\n    }\r\n\r\n    return messages.map((it) => <Message key={it.id} message={it} />)\r\n  }, [messages, isLoading]);\r\n\r\n  return (\r\n    <ST.Wrapper>\r\n      <ST.Header>\r\n        {onBack && (\r\n          <Button onClick={onBack}>\r\n            <Icon type=\"arrow-left\" />\r\n          </Button>\r\n        )}\r\n        <Avatar\r\n          userId={user.id}\r\n          firstName={user.firstName}\r\n          size={AvatarSize.XXXL}\r\n          lastName={user.lastName}\r\n          src={user.avatar}\r\n        />\r\n        <ST.Title>{user.lastName} {user.firstName} ({user.email})</ST.Title>\r\n      </ST.Header>\r\n      <ST.ScrollableContent>\r\n        <ST.Content>\r\n          {renderedContent}\r\n        </ST.Content>\r\n      </ST.ScrollableContent>\r\n      <ST.Footer>\r\n        <Textarea value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"Введите сообщение\" />\r\n        <ST.SendIcon type=\"send\" onClick={sendMessage} size={IconSize.XL} />\r\n      </ST.Footer>\r\n    </ST.Wrapper>\r\n  );\r\n}\r\n","import { ChangeEventHandler, FC, useEffect, useMemo, useState } from 'react';\r\nimport * as ST from './styled';\r\nimport { AppLoader, PageHeader } from '@src/components';\r\nimport { IDialogListItem, ISocketMessage } from '@src/api/Dialogs/models';\r\nimport { toastError } from '@src/utils/toast';\r\nimport { DialogsApi } from '@src/api/Dialogs/DialogsApi';\r\nimport { useDebounce, useMessageCallBack, useWindowWidth } from '@src/hooks';\r\nimport { DialogItem } from '@pages/Dialogs/DialogItem';\r\nimport { useDialogsContext } from '@providers/DialogsProvider/DialogsContext';\r\nimport { ActiveDialog } from '@pages/Dialogs/ActiveDialog';\r\nimport { useAuth } from '@providers/AuthProvider';\r\nimport { MessageEvents } from '@src/api/SocketApi/models';\r\n\r\nconst Posts: FC = () => {\r\n  const { user } = useAuth();\r\n  const { newDialog, clearNewDialog, activeDialog, setActiveDialog } = useDialogsContext();\r\n  const [dialogs, setDialogs] = useState<IDialogListItem[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [search, setSearch] = useState('');\r\n  const debouncedSearch = useDebounce(search, 400);\r\n  const windowWidth = useWindowWidth();\r\n\r\n  useEffect(() => {\r\n    if (newDialog) {\r\n      const activeUser = newDialog.users.find(it => it.id !== user?.id);\r\n\r\n      if (activeUser) {\r\n        setActiveDialog({\r\n          id: newDialog.id,\r\n          user: activeUser,\r\n        });\r\n      }\r\n\r\n      clearNewDialog();\r\n    }\r\n  }, [newDialog]);\r\n\r\n  const handleChangeSearch: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const getDialogs = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const res = await DialogsApi.fetchDialogs();\r\n\r\n      setDialogs(res.data);\r\n    } catch (e) {\r\n      toastError(e);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getDialogs()\r\n  }, [debouncedSearch]);\r\n\r\n  const handleBack = () => {\r\n    setActiveDialog(undefined);\r\n    getDialogs();\r\n  }\r\n\r\n  const showDialogs = useMemo(() => {\r\n    return windowWidth > 1010;\r\n  }, [windowWidth]);\r\n\r\n  const handleClickDialog = (dialog: IDialogListItem) => {\r\n    setActiveDialog(dialog);\r\n    setDialogs(prev => prev.map(it => {\r\n      if (it.id === dialog.id) {\r\n        it.unreadableMessages = 0;\r\n      }\r\n      return { ...it };\r\n    }))\r\n  }\r\n\r\n  useMessageCallBack((message: string) => {\r\n    const parsedMessage = JSON.parse(message) as ISocketMessage;\r\n\r\n    if (parsedMessage.event === MessageEvents.MESSAGE) {\r\n      if (!dialogs.find(it => it.id === parsedMessage.dialogId)) {\r\n        setDialogs(prev => [{ id: parsedMessage.dialogId, user: parsedMessage.user, unreadableMessages: 1, lastMessage: parsedMessage }, ...prev])\r\n      } else {\r\n        setDialogs(prev => prev.map(it => {\r\n          if (it.id === parsedMessage.dialogId && user?.id !== parsedMessage.user.id) {\r\n            if (activeDialog?.id !== parsedMessage.dialogId) {\r\n              it.unreadableMessages += 1;\r\n            }\r\n            it.lastMessage = parsedMessage;\r\n          }\r\n\r\n          if (it.id === parsedMessage.dialogId && user?.id === parsedMessage.user.id) {\r\n            it.lastMessage = { ...parsedMessage, read: true };\r\n          }\r\n          return { ...it };\r\n        }).sort((a, b) => Date.parse(b.lastMessage.updatedAt) - Date.parse(a.lastMessage.updatedAt)))\r\n      }\r\n    }\r\n  }, [dialogs, user]);\r\n\r\n  const renderedDialogs = useMemo(() => {\r\n    if (isLoading) {\r\n      return (\r\n        <AppLoader />\r\n      )\r\n    }\r\n\r\n    if (!dialogs.length) {\r\n      return (\r\n        <ST.EmptyText>\r\n          Диалогов нет\r\n        </ST.EmptyText>\r\n      );\r\n    }\r\n\r\n    if (activeDialog) {\r\n      return (\r\n        <ST.Content>\r\n          {showDialogs && (\r\n            <ST.ScrollableContent hasActive>\r\n              <ST.DialogsContainer hasActive>\r\n                {dialogs.map(it => <DialogItem key={it.id} dialog={it} onClick={() => handleClickDialog(it)} />)}\r\n              </ST.DialogsContainer>\r\n            </ST.ScrollableContent>\r\n          )}\r\n          <ActiveDialog dialogId={activeDialog.id} user={activeDialog.user} onBack={showDialogs ? undefined : handleBack} />\r\n        </ST.Content>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ST.Content>\r\n        <ST.ScrollableContent>\r\n          <ST.DialogsContainer>\r\n            {dialogs.map(it => <DialogItem key={it.id} dialog={it} onClick={() => handleClickDialog(it)} />)}\r\n          </ST.DialogsContainer>\r\n        </ST.ScrollableContent>\r\n      </ST.Content>\r\n    )\r\n  }, [dialogs, isLoading, activeDialog, showDialogs]);\r\n\r\n  return (\r\n    <ST.Wrapper>\r\n      <PageHeader title=\"Диалоги\" search={search} onChangeSearch={handleChangeSearch} />\r\n      {renderedDialogs}\r\n    </ST.Wrapper>\r\n  )\r\n}\r\n\r\nexport default Posts;\r\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","Content","_templateObject2","COLORS","ScrollableContent","_templateObject3","_ref","hasActive","DialogsContainer","_templateObject4","_ref2","_ref3","concat","EmptyText","_templateObject5","Header","Text","TextShorter","NewMessages","Title","_templateObject6","Date","_templateObject7","DialogItem","dialog","onClick","_jsxs","ST","children","_jsx","Avatar","userId","user","id","firstName","lastName","src","avatar","size","AvatarSize","tooltip","email","getTimeMessage","lastMessage","updatedAt","text","Boolean","unreadableMessages","Footer","SendIcon","Icon","isOwn","Message","message","useAuth","useMemo","ActiveDialog","dialogId","onBack","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","messages","setMessages","_useState5","_useState6","setMessage","getDialog","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","DialogsApi","sent","data","t0","toastError","finish","stop","apply","arguments","useMessageCallBack","parsedMessage","JSON","parse","event","MessageEvents","_toConsumableArray","SocketApi","messageId","useEffect","renderedContent","AppLoader","length","map","it","Button","type","Textarea","value","onChange","e","target","placeholder","IconSize","_useDialogsContext","useDialogsContext","newDialog","clearNewDialog","activeDialog","setActiveDialog","dialogs","setDialogs","search","setSearch","debouncedSearch","useDebounce","windowWidth","useWindowWidth","activeUser","users","find","getDialogs","handleBack","undefined","showDialogs","handleClickDialog","_objectSpread","read","sort","a","b","renderedDialogs","PageHeader","title","onChangeSearch"],"sourceRoot":""}