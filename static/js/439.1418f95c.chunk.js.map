{"version":3,"file":"static/js/439.1418f95c.chunk.js","mappings":"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","sources":["pages/Users/styled.ts","pages/Users/UserItem/styled.ts","pages/Users/UserItem/index.tsx","pages/Users/CreateUserModal/styled.ts","pages/Users/CreateUserModal/index.tsx","pages/Users/index.tsx","pages/Users/useFilters.ts"],"sourcesContent":["import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  grid-row-gap: 24px;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 24px;\r\n`;\r\n\r\nexport const EmptyText = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  grid-auto-rows: max-content;\r\n  grid-gap: 14px;\r\n  width: 100%;\r\n  height: fit-content;\r\n  overflow-x: auto;\r\n`;\r\n\r\nexport const Filters = styled.div`\r\n  --min-width: 231px;\r\n  grid-gap: 16px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill,minmax(var(--min-width),1fr));\r\n  width: 100%;\r\n  padding: 16px;\r\n  background: ${COLORS.white};\r\n  box-shadow: 0 7px 15px rgba(0,0,0,.05);\r\n  border-radius: 10px;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\nimport { Status } from '@src/components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  grid-column-gap: 10px;\r\n  width: 100%;\r\n  background-color: ${COLORS.white};\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color .3s;\r\n  border: 1px solid ${COLORS.lightGray40};\r\n\r\n  &:hover {\r\n    background: ${COLORS.lightGray20};\r\n  }\r\n`;\r\n\r\nexport const Info = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Roles = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  grid-column-gap: 10px;\r\n`;\r\n\r\nexport const StyledStatus = styled(Status)`\r\n  margin-left: auto;\r\n`;\r\n","import { FC } from 'react';\r\nimport { IUser } from '@src/api/Users/models';\r\n\r\nimport * as ST from './styled';\r\nimport { Avatar, Role, Status } from '@src/components';\r\n\r\ninterface IProps {\r\n  user: IUser;\r\n  onClick: () => void;\r\n  refetch: () => void;\r\n}\r\n\r\nexport const UserItem: FC<IProps> = ({ user, onClick }) => {\r\n  return (\r\n    <ST.Wrapper onClick={onClick}>\r\n      <Avatar userId={user.id} src={user.avatar} firstName={user.firstName} lastName={user.lastName}   />\r\n      <ST.Info>{user.lastName} {user.firstName} ({user.email})</ST.Info>\r\n      <ST.Roles>\r\n        {user.roles.map(it => <Role key={it.id} role={it.value} />)}\r\n      </ST.Roles>\r\n      <ST.StyledStatus status={user.status} />\r\n    </ST.Wrapper>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  min-height: 100%;\r\n  height: fit-content;\r\n  grid-row-gap: 24px;\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n  margin-top: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  grid-column-gap: 24px;\r\n`;\r\n","import { FC, useEffect, useState } from 'react';\r\nimport { Button, ButtonVariant, Input, SideModal } from '@src/components';\r\nimport * as ST from './styled';\r\nimport { useFormik } from 'formik';\r\nimport { handleFormError, toastError } from '@src/utils/toast';\r\nimport { UsersApi } from '@src/api/Users/UsersApi';\r\nimport { CmSelectValue, Select } from '@components/Select';\r\nimport { SelectOption } from '@components/Select/hooks/useSearch';\r\nimport { RolesApi } from '@src/api/Roles/RolesApi';\r\nimport { Checkbox } from '@components/Checkbox';\r\nimport * as yup from 'yup';\r\n\r\ninterface IProps {\r\n  onClose: () => void;\r\n  refetch: () => void;\r\n}\r\n\r\ninterface IForm {\r\n  email: string,\r\n  firstName: string,\r\n  lastName: string,\r\n  roles: SelectOption<string>[],\r\n  password: string\r\n}\r\n\r\nlet VALIDATION_SCHEMA = yup.object().shape({\r\n  email: yup.string().required('Обязательное поле').email('Не соответствует формату email'),\r\n  firstName: yup.string().required('Обязательное поле'),\r\n  lastName: yup.string().required('Обязательное поле'),\r\n  password: yup.string().required('Обязательное поле'),\r\n});\r\n\r\nexport const CreateUserModal: FC<IProps> = ({ refetch, onClose }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isRolesLoading, setIsRolesLoading] = useState(true);\r\n  const [roleOptions, setRoleOptions] = useState<SelectOption<string>[]>([]);\r\n\r\n  const form = useFormik<IForm>({\r\n    initialValues: {\r\n      password: '',\r\n      email: '',\r\n      lastName: '',\r\n      roles: [],\r\n      firstName: '',\r\n    },\r\n    validationSchema: VALIDATION_SCHEMA,\r\n\r\n    onSubmit: async (values) => {\r\n      try {\r\n        setIsLoading(true);\r\n        await UsersApi.fetchCreateUser({ ...values, roles: values.roles.map(it => it.value)});\r\n\r\n        refetch()\r\n        onClose()\r\n      } catch (e) {\r\n        handleFormError(e, form);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  });\r\n\r\n  const loadRoles = async () => {\r\n    try {\r\n      setIsRolesLoading(true);\r\n      const res = await RolesApi.fetchRoles();\r\n      setRoleOptions(res.data.map(it => ({ value: it.id, label: it.value })));\r\n    } catch (e) {\r\n      handleFormError(e, form);\r\n    } finally {\r\n      setIsRolesLoading(false);\r\n    }\r\n  }\r\n\r\n  const handleChangeRoles = (value: CmSelectValue) => {\r\n    form.setFieldValue('roles', value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadRoles()\r\n  }, []);\r\n\r\n  return (\r\n    <SideModal\r\n      titleText=\"Создание пользователя\"\r\n      onClose={onClose}\r\n      closeOnDocumentClick={false}\r\n    >\r\n      <ST.Form onSubmit={form.handleSubmit}>\r\n        <Input\r\n          autoComplete=\"email\"\r\n          name=\"email\"\r\n          onChange={form.handleChange}\r\n          value={form.values.email}\r\n          caption=\"Email\"\r\n          placeholder=\"Введите email\"\r\n          isError={Boolean(form.errors.email)}\r\n          errorText={form.errors.email}\r\n          onBlur={form.handleBlur}\r\n        />\r\n        <Input\r\n          name=\"lastName\"\r\n          onChange={form.handleChange}\r\n          value={form.values.lastName}\r\n          caption=\"Фамилия\"\r\n          placeholder=\"Введите фамилию\"\r\n          isError={Boolean(form.errors.lastName)}\r\n          errorText={form.errors.lastName}\r\n          onBlur={form.handleBlur}\r\n        />\r\n        <Input\r\n          name=\"firstName\"\r\n          onChange={form.handleChange}\r\n          value={form.values.firstName}\r\n          caption=\"Имя\"\r\n          placeholder=\"Введите имя\"\r\n          isError={Boolean(form.errors.firstName)}\r\n          errorText={form.errors.firstName}\r\n          onBlur={form.handleBlur}\r\n        />\r\n        <Input\r\n          autoComplete=\"new-password\"\r\n          type=\"password\"\r\n          name=\"password\"\r\n          onChange={form.handleChange}\r\n          value={form.values.password}\r\n          caption=\"Пароль\"\r\n          placeholder=\"Введите пароль\"\r\n          isError={Boolean(form.errors.password)}\r\n          errorText={form.errors.password}\r\n          onBlur={form.handleBlur}\r\n        />\r\n        <Select\r\n          placeholder=\"Выберите роли\"\r\n          caption=\"Роли\"\r\n          multi\r\n          options={roleOptions}\r\n          loading={isRolesLoading}\r\n          value={form.values.roles}\r\n          onChange={handleChangeRoles}\r\n        />\r\n        <ST.Footer>\r\n          <Button text=\"Создать\" fullWidth isLoading={isLoading} />\r\n          <Button variant={ButtonVariant.OUTLINE} text=\"Отмена\" fullWidth onClick={onClose} />\r\n        </ST.Footer>\r\n      </ST.Form>\r\n    </SideModal>\r\n  )\r\n}\r\n","import { ChangeEventHandler, FC, useEffect, useMemo, useState } from 'react';\r\nimport * as ST from './styled';\r\nimport { AppLoader, Button, PageHeader, Select } from '@src/components';\r\nimport { useDebounce, useModalControls, useUsers } from '@src/hooks';\r\nimport { IUser } from '@src/api/Users/models';\r\nimport { UserItem } from '@pages/Users/UserItem';\r\nimport { useRenderIfRole } from '@src/utils/roles';\r\nimport { RoleType } from '@src/api/Roles/models';\r\nimport { CreateUserModal } from '@pages/Users/CreateUserModal';\r\nimport { UserModal } from '@pages/Users/UserModal';\r\nimport { useFilters } from '@pages/Users/useFilters';\r\n\r\nconst Users: FC = () => {\r\n  const {\r\n    fetchUsers,\r\n    users,\r\n    isLoading,\r\n    search,\r\n    handleChangeSearch,\r\n    form,\r\n    createSelectChangeHandler,\r\n    statusOptions,\r\n    rolesOptions,\r\n    isRolesLoading,\r\n    activeUser,\r\n    setActiveUser,\r\n    reset,\r\n  } = useFilters();\r\n  const { isOpen, open, close } = useModalControls();\r\n  const { execIf } = useRenderIfRole();\r\n\r\n  const openUserModal = (user: IUser) => {\r\n    setActiveUser(user);\r\n  }\r\n\r\n  const closeUserModal = () => {\r\n    setActiveUser(undefined);\r\n  }\r\n\r\n  const renderedUsers = useMemo(() => {\r\n    if (isLoading) {\r\n      return (\r\n        <AppLoader />\r\n      )\r\n    }\r\n\r\n    if (!users.length) {\r\n      return (\r\n        <ST.EmptyText>\r\n          Пользователей нет\r\n        </ST.EmptyText>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ST.Content>\r\n        {users.map(it => <UserItem key={it.id} user={it} refetch={fetchUsers} onClick={() => openUserModal(it)} />)}\r\n      </ST.Content>\r\n    )\r\n  }, [users, isLoading]);\r\n\r\n  return (\r\n    <ST.Wrapper>\r\n      <PageHeader\r\n        title=\"Пользователи\"\r\n        search={search}\r\n        count={`${users.length} пользователей`}\r\n        onChangeSearch={handleChangeSearch}\r\n        buttonText={execIf(RoleType.ADMIN, \"Создать пользователя\")}\r\n        onButtonClick={execIf(RoleType.ADMIN, open)}\r\n      />\r\n      <ST.Filters>\r\n        <Select value={form.values.roles} options={rolesOptions} loading={isRolesLoading} onChange={createSelectChangeHandler('roles')} placeholder=\"Выберите роли\" multi searchable />\r\n        <Select value={form.values.status} options={statusOptions} onChange={createSelectChangeHandler('status')} placeholder=\"Выберите статусы\" multi />\r\n        <Button text=\"Сбросить\" onClick={reset} />\r\n      </ST.Filters>\r\n      {renderedUsers}\r\n      {isOpen && (\r\n        <CreateUserModal\r\n          onClose={close}\r\n          refetch={fetchUsers}\r\n        />\r\n      )}\r\n      {activeUser && (\r\n        <UserModal userId={activeUser.id} onClose={closeUserModal} refetch={fetchUsers} />\r\n      )}\r\n    </ST.Wrapper>\r\n  )\r\n}\r\n\r\nexport default Users;\r\n","import { useFormik } from 'formik';\r\nimport { useDebounce, useRoles, useUsers } from '@src/hooks';\r\nimport { ChangeEventHandler, useEffect, useMemo, useState } from 'react';\r\nimport { SelectOption } from '@components/Select/hooks/useSearch';\r\nimport { CmSelectValue } from '@src/components';\r\nimport { IUser, UserStatus } from '@src/api/Users/models';\r\n\r\nexport interface IFilterPostsForm {\r\n  roles: SelectOption<string>[];\r\n  status: SelectOption<UserStatus>[];\r\n}\r\n\r\nexport const useFilters = () => {\r\n  const [activeUser, setActiveUser] = useState<IUser>();\r\n  const [search, setSearch] = useState('');\r\n  const debouncedSearch = useDebounce(search, 400)\r\n  const { roles, getRoles, isLoading: isRolesLoading } = useRoles();\r\n  const { getUsers, users, isLoading } = useUsers();\r\n\r\n  const form = useFormik<IFilterPostsForm>({\r\n    initialValues: {\r\n      roles: [],\r\n      status: [],\r\n    },\r\n\r\n    onSubmit: () => {}\r\n  })\r\n\r\n  useEffect(() => {\r\n    getRoles();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchUsers()\r\n  }, [form.values.roles, debouncedSearch, form.values.status]);\r\n\r\n  useEffect(() => {\r\n    if (activeUser) {\r\n      setActiveUser(users.find(it => it.id === activeUser.id))\r\n    }\r\n  }, [users]);\r\n\r\n  const handleChangeSearch: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const fetchUsers = async () => {\r\n    const { roles, status } = form.values;\r\n    return await getUsers({ search: debouncedSearch, roles: roles.map(it => it.value), status: status.map(it => it.value) });\r\n  }\r\n\r\n  const rolesOptions: SelectOption<string>[] = useMemo(() => {\r\n    return roles.map(it => ({ value: it.id, label: it.value }))\r\n  }, [roles]);\r\n\r\n  const statusOptions: SelectOption<UserStatus>[] = useMemo(() => {\r\n    return Object.values(UserStatus).map(it => ({ value: it, label: it }))\r\n  }, []);\r\n\r\n  const createSelectChangeHandler = (field: string) => (value: CmSelectValue) => {\r\n    form.setFieldValue(field, value);\r\n  }\r\n\r\n  const reset = () => {\r\n    form.resetForm();\r\n    setSearch('')\r\n  }\r\n\r\n  return {\r\n    activeUser,\r\n    setActiveUser,\r\n    form,\r\n    users,\r\n    statusOptions,\r\n    rolesOptions,\r\n    createSelectChangeHandler,\r\n    handleChangeSearch,\r\n    search,\r\n    isRolesLoading,\r\n    isLoading,\r\n    fetchUsers,\r\n    reset,\r\n  }\r\n}\r\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","EmptyText","_templateObject2","Content","_templateObject3","Filters","_templateObject4","COLORS","Info","Roles","StyledStatus","Status","UserItem","_ref","user","onClick","_jsxs","ST","children","_jsx","Avatar","userId","id","src","avatar","firstName","lastName","email","roles","map","it","Role","role","value","status","Form","Footer","VALIDATION_SCHEMA","yup","shape","required","password","CreateUserModal","refetch","onClose","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","isRolesLoading","setIsRolesLoading","_useState5","_useState6","roleOptions","setRoleOptions","form","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","UsersApi","_objectSpread","t0","handleFormError","finish","stop","_x","apply","arguments","loadRoles","_ref2","_callee2","res","_context2","RolesApi","sent","data","label","useEffect","SideModal","titleText","closeOnDocumentClick","handleSubmit","Input","autoComplete","name","onChange","handleChange","caption","placeholder","isError","Boolean","errors","errorText","onBlur","handleBlur","type","Select","multi","options","loading","setFieldValue","Button","text","fullWidth","variant","ButtonVariant","_useFilters","activeUser","setActiveUser","search","setSearch","debouncedSearch","useDebounce","_useRoles","useRoles","getRoles","_useUsers","useUsers","getUsers","users","fetchUsers","find","_form$values","abrupt","rolesOptions","useMemo","statusOptions","Object","UserStatus","createSelectChangeHandler","field","handleChangeSearch","e","target","reset","resetForm","useFilters","_useModalControls","useModalControls","isOpen","open","close","execIf","useRenderIfRole","renderedUsers","AppLoader","length","PageHeader","title","count","concat","onChangeSearch","buttonText","RoleType","onButtonClick","searchable","UserModal","undefined"],"sourceRoot":""}