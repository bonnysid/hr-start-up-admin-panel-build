{"version":3,"file":"static/js/847.de1d7c52.chunk.js","mappings":"sOAIaA,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4FAIZ,SAAAC,GAAQ,OAAAA,EAALC,MAAoB,WAAa,YAAY,IAGxDC,EAAUL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wPAUX,SAAAK,GAAQ,OAAAA,EAALH,MAAoBI,EAAAA,EAAAA,OAAgBA,EAAAA,EAAAA,WAAkB,IAGlEC,GAAiBT,EAAAA,EAAAA,IAAOU,EAAAA,EAAPV,CAAgBW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,iHAM5BM,EAAAA,EAAAA,QAILI,EAAOZ,EAAAA,GAAAA,IAAUa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,kCAIjBY,EAAOd,EAAAA,GAAAA,IAAUe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,uBACnBM,EAAAA,EAAAA,Q,oECvBEQ,EAAsB,SAAHb,GAAqB,IAAfc,EAAOd,EAAPc,QAC5BC,GAASC,EAAAA,EAAAA,MAATD,KACFE,GAAeC,EAAAA,EAAAA,QAA8B,MAC7CC,GAAcC,EAAAA,EAAAA,MACdC,GAAWD,EAAAA,EAAAA,MAEXnB,GAAQqB,EAAAA,EAAAA,UAAQ,kBAAMR,EAAQC,KAAKQ,MAAW,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,GAAE,GAAE,CAACT,EAASC,IAkBpE,OACES,EAAAA,EAAAA,MAACC,EAAU,CAACxB,MAAOA,EAAMyB,SAAA,EACvBF,EAAAA,EAAAA,MAACC,EAAU,CAACE,IAAKV,EAAchB,MAAOA,EAAO2B,cAlB7B,SAACC,GACf,aAAcf,IAChBe,EAAEC,iBACE7B,GACFoB,EAASU,OAGf,EAW4EL,SAAA,EACtEM,EAAAA,EAAAA,KAACP,EAAO,CAAAC,SAAEZ,EAAQmB,QAClBD,EAAAA,EAAAA,KAACP,EAAO,CAAAC,UAAEQ,EAAAA,EAAAA,GAAepB,EAAQqB,aAChCd,EAASe,SACRJ,EAAAA,EAAAA,KAACP,EAAiB,CAChBY,mBAAoBpB,EAAaqB,QACjCC,QAASlB,EAASmB,MAAMd,UAExBM,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CAACC,QAASC,EAAAA,GAAAA,OAAsBV,KAAK,6CAAUW,WAAS,EAACC,QAAS1B,EAAYY,YAI1FZ,EAAYiB,SACXJ,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CACLC,KAAMC,EAAAA,EAAAA,QACNC,aAAc9B,EAAYqB,MAC1BU,UAzBa,WACf,aAAcpC,IAChBqC,EAAAA,EAAAA,cAAwB,CAAEC,UAAWtC,EAAQS,KAC7CJ,EAAYqB,QAEhB,EAqBQa,QAAS,CACPC,OAAQ,CACNrB,KAAM,mDACNY,QAAS1B,EAAYqB,OAEvBe,OAAQ,CACNtB,KAAM,+CAERP,SACH,0OAMT,C,8MCvEa9B,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iIASpBG,EAAUL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,sJAKXM,EAAAA,EAAAA,YACNA,EAAAA,EAAAA,OAIHmD,EAAoB3D,EAAAA,GAAAA,IAAUW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,mIAC5B,SAAAC,GAAY,OAAAA,EAATyD,UAA4B,QAAU,MAAM,IAUjDC,EAAmB7D,EAAAA,GAAAA,IAAUa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,sMAG3B,SAAAK,GAAY,OAAAA,EAATqD,UAA4B,QAAU,MAAM,IAI5C,SAAAE,GAAY,OAAAA,EAATF,UAAyB,aAAAG,OAAgBvD,EAAAA,EAAAA,aAAuB,MAAM,GAC3EA,EAAAA,EAAAA,OAIHwD,EAAYhE,EAAAA,GAAAA,IAAUe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,iH,wCCzCtBH,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2PAYTM,EAAAA,EAAAA,QAIXyD,EAASjE,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,oHAQnBG,EAAUL,EAAAA,GAAAA,IAAUW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,yGAQpBU,GAAOZ,EAAAA,EAAAA,IAAOkE,EAAAA,GAAPlE,CAAmBa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,kHAE5BM,EAAAA,EAAAA,QAME2D,EAAcnE,EAAAA,GAAAA,IAAUe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,0NAQfM,EAAAA,EAAAA,OACXA,EAAAA,EAAAA,OAIE4D,GAAQpE,EAAAA,EAAAA,IAAOkE,EAAAA,GAAPlE,CAAmBqE,IAAAA,GAAAnE,EAAAA,EAAAA,GAAA,wGAO3BY,EAAOd,EAAAA,GAAAA,IAAUsE,IAAAA,GAAApE,EAAAA,EAAAA,GAAA,gDACnBM,EAAAA,EAAAA,Q,kBCtDE+D,EAAyB,SAAHpE,GAA6B,IAAvBqE,EAAMrE,EAANqE,OAAQxB,EAAO7C,EAAP6C,QAC/C,OACErB,EAAAA,EAAAA,MAACC,EAAU,CAACoB,QAASA,EAAQnB,SAAA,EAC3BM,EAAAA,EAAAA,KAACsC,EAAAA,GAAM,CACLC,OAAQF,EAAOtD,KAAKQ,GACpBiD,UAAWH,EAAOtD,KAAKyD,UACvBC,SAAUJ,EAAOtD,KAAK0D,SACtBC,IAAKL,EAAOtD,KAAK4D,OACjBC,KAAMC,EAAAA,GAAAA,QAERrD,EAAAA,EAAAA,MAACC,EAAU,CAAAC,SAAA,EACTF,EAAAA,EAAAA,MAACC,EAAS,CAAAC,SAAA,EACRF,EAAAA,EAAAA,MAACC,EAAQ,CAACqD,SAAO,EAAApD,SAAA,CACd2C,EAAOtD,KAAK0D,SAAS,IAAEJ,EAAOtD,KAAKyD,UAAU,KAAGH,EAAOtD,KAAKgE,MAAM,QAGrE/C,EAAAA,EAAAA,KAACP,EAAO,CAAAC,UACLQ,EAAAA,EAAAA,GAAemC,EAAOW,YAAY7C,iBAGvCX,EAAAA,EAAAA,MAACC,EAAS,CAAAC,SAAA,EACRM,EAAAA,EAAAA,KAACP,EAAO,CAAAC,SACL2C,EAAOW,YAAY/C,OAErBgD,QAAQZ,EAAOa,sBACdlD,EAAAA,EAAAA,KAACP,EAAc,CAAAC,SACZ2C,EAAOa,6BAOtB,E,qBCxCatF,GAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wFAOpBG,GAAUL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kLAWpBoF,GAAatF,EAAAA,GAAAA,IAAUW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,uTAQzBM,EAAAA,EAAAA,YACWA,EAAAA,EAAAA,OAGEA,EAAAA,EAAAA,OAKAA,EAAAA,EAAAA,QAIX+E,GAAoBvF,EAAAA,GAAAA,IAAUa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,uFAO9ByD,GAAoB3D,EAAAA,GAAAA,IAAUe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,uIAW9BsF,GAASxF,EAAAA,GAAAA,KAAWqE,IAAAA,GAAAnE,EAAAA,EAAAA,GAAA,iHAKPM,EAAAA,EAAAA,aAGbiF,GAAezF,EAAAA,GAAAA,OAAasE,IAAAA,GAAApE,EAAAA,EAAAA,GAAA,sCAI5BwF,IAAW1F,EAAAA,EAAAA,IAAO2F,GAAAA,EAAP3F,CAAY4F,IAAAA,GAAA1F,EAAAA,EAAAA,GAAA,6GAEzBM,EAAAA,EAAAA,OAIEA,EAAAA,EAAAA,QAIA4D,GAAQpE,EAAAA,GAAAA,IAAU6F,IAAAA,GAAA3F,EAAAA,EAAAA,GAAA,+BAIlB+D,GAASjE,EAAAA,GAAAA,IAAU8F,IAAAA,GAAA5F,EAAAA,EAAAA,GAAA,+JAKHM,EAAAA,EAAAA,a,uDCvEhBuF,GAA2B,SAAH5F,GAAoC,IAA9B6F,EAAQ7F,EAAR6F,SAAU9E,EAAIf,EAAJe,KAAM+E,EAAM9F,EAAN8F,OAC3CC,GAAgB/E,EAAAA,GAAAA,MAAtBD,KACRiF,GAAkCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAgCL,EAAAA,EAAAA,UAAqB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBG,GAAYxF,EAAAA,EAAAA,QAA8B,MAChDyF,GAA4CV,EAAAA,EAAAA,WAAS,GAAMW,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAClCG,GAAOC,EAAAA,GAAAA,IAAU,CACrBC,cAAe,CACbnG,QAAS,IAEXoG,SAAU,SAACC,GACTC,EAAOD,EAAOrG,QAChB,IAGIsG,EAAS,SAACtG,GACdqC,GAAAA,EAAAA,YAAsB,CACpB0C,SAAAA,EACA5D,KAAMnB,IAERiG,EAAKM,WACP,EAEMC,EAAS,eAAAlH,GAAAmH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEK,OAFLF,EAAAC,KAAA,EAEdzB,GAAa,GAAMwB,EAAAE,KAAA,EACDC,EAAAA,EAAAA,gBAA2BnC,GAAU,KAAD,EAAhD8B,EAAGE,EAAAI,KAETxB,EAAYkB,EAAIO,KAAK1B,UAAUqB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,UAE/BO,EAAAA,EAAAA,IAAUP,EAAAM,IAAI,QAEM,OAFNN,EAAAC,KAAA,GAEdzB,GAAa,GAAOwB,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAEvB,kBAXc,OAAAtH,EAAAmI,MAAA,KAAAC,UAAA,MAafC,EAAAA,EAAAA,KAAmB,SAAC3H,GAClB,IAO2B4H,EAAAC,EAAAC,EAPrBC,EAAgBC,KAAKC,MAAMjI,GAE7B+H,EAAcG,QAAUC,GAAAA,EAAAA,SAAyBJ,EAAchD,WAAaA,IAC9EY,GAAY,SAAAqB,GAAI,SAAAlE,QAAAsF,EAAAA,EAAAA,GAAQpB,GAAI,CAAEe,GAAgB,IAE1CA,EAAc9H,KAAKQ,MAAkB,OAAXwE,QAAW,IAAXA,OAAW,EAAXA,EAAaxE,MACzC4B,GAAAA,EAAAA,YAAsB,CAAEC,UAAWyF,EAActH,KAC7CmF,EAAUpE,UACoB,QAAjBoG,EAAAhC,EAAUpE,eAAO,IAAAoG,OAAA,EAAjBA,EAAmBS,eAAgC,QAApBR,EAAGjC,EAAUpE,eAAO,IAAAqG,OAAA,EAAjBA,EAAmBS,eAAgC,QAApBR,EAAGlC,EAAUpE,eAAO,IAAAsG,OAAA,EAAjBA,EAAmBS,YACxF,IACZvC,GAAkB,KAM1B,GAAI+B,EAAcG,QAAUC,GAAAA,EAAAA,eAA8B,CACxD,IAAMJ,EAAgBC,KAAKC,MAAMjI,GAE7B+H,EAAchD,WAAaA,GAC7BY,GAAY,SAAAqB,GAAI,OAAIA,EAAKwB,QAAO,SAAAC,GAAE,OAAIA,EAAGhI,KAAOsH,EAAczF,SAAS,GAAC,GAE5E,CACF,GAAG,CAACyC,EAAUE,IAEd,IAAMyD,EAAiB,WAAO,IAADC,EAAAC,EACV,QAAjBD,EAAA/C,EAAUpE,eAAO,IAAAmH,GAAjBA,EAAmBE,SAAS,EAAoB,QAAnBD,EAAEhD,EAAUpE,eAAO,IAAAoH,OAAA,EAAjBA,EAAmBP,aACpD,GAYAS,EAAAA,EAAAA,kBAAgB,WACd,GAAIlD,EAAUpE,QAAS,CAAC,IAADuH,EAAAC,EAAAC,EACfC,EAAUxD,EAASA,EAASyD,OAAS,GACrCC,GAA0B,QAAjBL,EAAAnD,EAAUpE,eAAO,IAAAuH,OAAA,EAAjBA,EAAmBV,eAAgC,QAApBW,EAAGpD,EAAUpE,eAAO,IAAAwH,OAAA,EAAjBA,EAAmBV,eAAgC,QAApBW,EAAGrD,EAAUpE,eAAO,IAAAyH,OAAA,EAAjBA,EAAmBV,YAElGW,GAAWA,EAAQjJ,KAAKQ,MAAkB,OAAXwE,QAAW,IAAXA,OAAW,EAAXA,EAAaxE,KAErC2I,EAAS,KADlBV,GAIJ,CAEF,GAAG,CAAChD,KAEJoD,EAAAA,EAAAA,kBAAgB,WACTxD,GACHoD,GAEJ,GAAG,CAACpD,KAEJ+D,EAAAA,EAAAA,YAAU,WACR7C,GACF,GAAG,CAACzB,IAEJ,IAAMuE,GAAkB9I,EAAAA,EAAAA,UAAQ,WAC9B,OAAI8E,GACKpE,EAAAA,EAAAA,KAACqI,EAAAA,GAAS,IAGd7D,EAASyD,OAIPzD,EAAS8D,KAAI,SAACf,GAAE,OAAKvH,EAAAA,EAAAA,KAACnB,GAAAA,EAAO,CAAaC,QAASyI,GAAhBA,EAAGhI,GAAmB,IAHvD,2EAIX,GAAG,CAACiF,EAAUJ,IAEd,OACE5E,EAAAA,EAAAA,MAACC,GAAU,CAAAC,SAAA,EACTF,EAAAA,EAAAA,MAACC,GAAS,CAAAC,SAAA,CACPoE,IACC9D,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CAACI,QAASiD,EAAOpE,UACtBM,EAAAA,EAAAA,KAACwD,GAAAA,EAAI,CAACzC,KAAK,kBAGff,EAAAA,EAAAA,KAACsC,EAAAA,GAAM,CACLC,OAAQxD,EAAKQ,GACbiD,UAAWzD,EAAKyD,UAChBI,KAAMC,EAAAA,GAAAA,KACNJ,SAAU1D,EAAK0D,SACfC,IAAK3D,EAAK4D,UAEZnD,EAAAA,EAAAA,MAACC,GAAQ,CAAAC,SAAA,CAAEX,EAAK0D,SAAS,IAAE1D,EAAKyD,UAAU,KAAGzD,EAAKgE,MAAM,WAE1DvD,EAAAA,EAAAA,MAACC,GAAoB,CAAAC,SAAA,EACnBM,EAAAA,EAAAA,KAACP,GAAoB,CACnBE,IAAK+E,EACL6D,SAlEa,WACK,IAADC,EAAAC,EAAAC,EAAnBhE,EAAUpE,WACoB,QAAjBkI,EAAA9D,EAAUpE,eAAO,IAAAkI,OAAA,EAAjBA,EAAmBrB,eAAgC,QAApBsB,EAAG/D,EAAUpE,eAAO,IAAAmI,OAAA,EAAjBA,EAAmBrB,eAAgC,QAApBsB,EAAGhE,EAAUpE,eAAO,IAAAoI,OAAA,EAAjBA,EAAmBrB,WAEzF,IACXvC,GAAkB,GAGxB,EA0D+BpF,UAEvBM,EAAAA,EAAAA,KAACP,GAAU,CAAAC,SACR0I,MAGJvD,IACC7E,EAAAA,EAAAA,KAACP,GAAa,CAACoB,QAAS2G,EAAe9H,SAAC,8FAM5CF,EAAAA,EAAAA,MAACC,GAAS,CAACyF,SAAUH,EAAK4D,aAAajJ,SAAA,EACrCM,EAAAA,EAAAA,KAAC4I,EAAAA,GAAQ,CACPC,KAAK,UACLC,MAAO/D,EAAKI,OAAOrG,QACnBiK,SAAUhE,EAAKiE,aACfC,YAAY,oGACZC,QAAS,kBAAM9D,EAAOL,EAAKI,OAAOrG,QAAQ,KAE5CkB,EAAAA,EAAAA,KAACP,GAAe,CAAAC,UACdM,EAAAA,EAAAA,KAACP,GAAW,CAACsB,KAAK,OAAO6B,KAAMuG,GAAAA,EAAAA,YAKzC,ECfA,GAxJkB,WAChB,IAAQpK,GAASC,EAAAA,GAAAA,MAATD,KACRqK,GAAqEC,EAAAA,EAAAA,KAA7DC,EAASF,EAATE,UAAWC,EAAcH,EAAdG,eAAgBC,EAAYJ,EAAZI,aAAcC,EAAeL,EAAfK,gBACjDzF,GAA8BC,EAAAA,EAAAA,UAA4B,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtD0F,EAAOxF,EAAA,GAAEyF,EAAUzF,EAAA,GAC1BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCF,EAASG,EAAA,GAAEF,EAAYE,EAAA,GAC9BI,GAA4BV,EAAAA,EAAAA,UAAS,IAAGW,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAAjCiF,EAAMhF,EAAA,GAAEiF,EAASjF,EAAA,GAClBkF,GAAkBC,EAAAA,EAAAA,IAAYH,EAAQ,KACtCI,GAAcC,EAAAA,EAAAA,OAEpB9B,EAAAA,EAAAA,YAAU,WACR,GAAImB,EAAW,CACb,IAAMY,EAAaZ,EAAUa,MAAMC,MAAK,SAAA7C,GAAE,OAAIA,EAAGhI,MAAW,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,GAAI,IAE9D2K,GACFT,EAAgB,CACdlK,GAAI+J,EAAU/J,GACdR,KAAMmL,IAIVX,GACF,CACF,GAAG,CAACD,IAEJ,IAIMe,EAAU,eAAArM,GAAAuH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFJF,EAAAC,KAAA,EAEfzB,GAAa,GAAMwB,EAAAE,KAAA,EACDC,EAAAA,EAAAA,eAA0B,KAAD,EAArCL,EAAGE,EAAAI,KAET0D,EAAWhE,EAAIO,MAAML,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,UAErBO,EAAAA,EAAAA,IAAUP,EAAAM,IAAI,QAEM,OAFNN,EAAAC,KAAA,GAEdzB,GAAa,GAAOwB,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAEvB,kBAXe,OAAA1H,EAAAuI,MAAA,KAAAC,UAAA,MAahB2B,EAAAA,EAAAA,YAAU,WACRkC,GACF,GAAG,CAACP,IAEJ,IAAMQ,EAAa,WACjBb,OAAgBc,GAChBF,GACF,EAEMG,GAAclL,EAAAA,EAAAA,UAAQ,WAC1B,OAAO0K,EAAc,IACvB,GAAG,CAACA,IAEES,EAAoB,SAACpI,GACzBoH,EAAgBpH,GAChBsH,GAAW,SAAA7D,GAAI,OAAIA,EAAKwC,KAAI,SAAAf,GAI1B,OAHIA,EAAGhI,KAAO8C,EAAO9C,KACnBgI,EAAGrE,mBAAqB,IAE1BwH,EAAAA,EAAAA,GAAA,GAAYnD,EACd,GAAE,GACJ,GAEAd,EAAAA,EAAAA,KAAmB,SAAC3H,GAClB,IAAM+H,EAAgBC,KAAKC,MAAMjI,GAsBjC,GApBI+H,EAAcG,QAAUC,GAAAA,EAAAA,UACrByC,EAAQU,MAAK,SAAA7C,GAAE,OAAIA,EAAGhI,KAAOsH,EAAchD,QAAQ,IAGtD8F,GAAW,SAAA7D,GAAI,OAAIA,EAAKwC,KAAI,SAAAf,GAW1B,OAVIA,EAAGhI,KAAOsH,EAAchD,WAAgB,OAAJ9E,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,MAAOsH,EAAc9H,KAAKQ,MACtD,OAAZiK,QAAY,IAAZA,OAAY,EAAZA,EAAcjK,MAAOsH,EAAchD,WACrC0D,EAAGrE,oBAAsB,GAE3BqE,EAAGvE,YAAc6D,GAGfU,EAAGhI,KAAOsH,EAAchD,WAAgB,OAAJ9E,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,MAAOsH,EAAc9H,KAAKQ,KACtEgI,EAAGvE,aAAW0H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ7D,GAAa,IAAE8D,MAAM,MAE7CD,EAAAA,EAAAA,GAAA,GAAYnD,EACd,IAAGqD,MAAK,SAACC,EAAGC,GAAC,OAAKnM,KAAKoI,MAAM+D,EAAE9H,YAAY7C,WAAaxB,KAAKoI,MAAM8D,EAAE7H,YAAY7C,UAAU,GAAC,IAd5FwJ,GAAW,SAAA7D,GAAI,OAAK,CAAEvG,GAAIsH,EAAchD,SAAU9E,KAAM8H,EAAc9H,KAAMmE,mBAAoB,EAAGF,YAAa6D,IAAejF,QAAAsF,EAAAA,EAAAA,GAAKpB,GAAI,KAkBxIe,EAAcG,QAAUC,GAAAA,EAAAA,eAA8B,CACxD,IAAMJ,EAAgBC,KAAKC,MAAMjI,GAEjC6K,GAAW,SAAA7D,GAAI,OAAIA,EAAKwC,KAAI,SAAAf,GAC1B,OAAIA,EAAGhI,KAAOsH,EAAchD,UAC1B6G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKnD,GAAE,IACLvE,YAAa6D,EAAc7D,cAIxBuE,CACT,GAAE,GACJ,CACF,GAAG,CAACmC,EAAS3K,IAEb,IAAMgM,GAAkBzL,EAAAA,EAAAA,UAAQ,WAC9B,OAAI8E,GAEApE,EAAAA,EAAAA,KAACqI,EAAAA,GAAS,IAITqB,EAAQzB,OAQTuB,GAEAhK,EAAAA,EAAAA,MAACC,EAAU,CAAAC,SAAA,CACR8K,IACCxK,EAAAA,EAAAA,KAACP,EAAoB,CAACgC,WAAS,EAAA/B,UAC7BM,EAAAA,EAAAA,KAACP,EAAmB,CAACgC,WAAS,EAAA/B,SAC3BgK,EAAQpB,KAAI,SAAAf,GAAE,OAAIvH,EAAAA,EAAAA,KAACoC,EAAU,CAAaC,OAAQkF,EAAI1G,QAAS,kBAAM4J,EAAkBlD,EAAG,GAAvDA,EAAGhI,GAAwD,SAIrGS,EAAAA,EAAAA,KAAC4D,GAAY,CAACC,SAAU2F,EAAajK,GAAIR,KAAMyK,EAAazK,KAAM+E,OAAQ0G,OAAcD,EAAYD,QAMxGtK,EAAAA,EAAAA,KAACP,EAAU,CAAAC,UACTM,EAAAA,EAAAA,KAACP,EAAoB,CAAAC,UACnBM,EAAAA,EAAAA,KAACP,EAAmB,CAAAC,SACjBgK,EAAQpB,KAAI,SAAAf,GAAE,OAAIvH,EAAAA,EAAAA,KAACoC,EAAU,CAAaC,OAAQkF,EAAI1G,QAAS,kBAAM4J,EAAkBlD,EAAG,GAAvDA,EAAGhI,GAAwD,WAzBnGS,EAAAA,EAAAA,KAACP,EAAY,CAAAC,SAAC,uEA8BpB,GAAG,CAACgK,EAAStF,EAAWoF,EAAcgB,IAEtC,OACEhL,EAAAA,EAAAA,MAACC,EAAU,CAAAC,SAAA,EACTM,EAAAA,EAAAA,KAACgL,EAAAA,GAAU,CAACC,MAAM,6CAAUrB,OAAQA,EAAQsB,eA1HiB,SAACrL,GAChEgK,EAAUhK,EAAEsL,OAAOrC,MACrB,IAyHKiC,IAGP,C","sources":["pages/Dialogs/Message/styled.ts","pages/Dialogs/Message/index.tsx","pages/Dialogs/styled.ts","pages/Dialogs/DialogItem/styled.ts","pages/Dialogs/DialogItem/index.tsx","pages/Dialogs/ActiveDialog/styled.ts","pages/Dialogs/ActiveDialog/index.tsx","pages/Dialogs/index.tsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\nimport { Dropdown } from '@components/Select/Dropdown';\r\n\r\nexport const Wrapper = styled.div<{ isOwn: boolean }>`\r\n  display: flex;\r\n  position: relative;\r\n  width: 100%;\r\n  justify-content: ${({ isOwn }) => isOwn ? 'flex-end' : 'flex-start'};\r\n`;\r\n\r\nexport const Content = styled.div<{ isOwn: boolean }>`\r\n  display: flex;\r\n  align-items: flex-end;\r\n  position: relative;\r\n  gap: 10px;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  padding: 8px 8px 4px 8px;\r\n  max-width: calc(50% - 10px);\r\n  border-radius: 5px;\r\n  background-color: ${({ isOwn }) => isOwn ? COLORS.blue30 : COLORS.lightGray30};\r\n`;\r\n\r\nexport const StyledDropDown = styled(Dropdown)`\r\n  width: 200px;\r\n  top: -43px !important;\r\n  left: -150px;\r\n  \r\n  & > div {\r\n    background: ${COLORS.blue20};\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  padding-bottom: 5px;\r\n`;\r\n\r\nexport const Date = styled.div`\r\n  color: ${COLORS.gray90}\r\n`;\r\n","import React, { FC, useMemo, useRef, useState } from 'react';\r\nimport { IMessage } from '@src/api/Dialogs/models';\r\nimport * as ST from './styled';\r\nimport { getTimeMessage } from '@src/utils/date';\r\nimport { useAuth } from '@providers/AuthProvider';\r\nimport { Dropdown } from '@components/Select/Dropdown';\r\nimport { Button, ButtonVariant } from '@src/components';\r\nimport { Dialog, DialogTypes } from '@components/Dialog';\r\nimport { useModalControls } from '@src/hooks';\r\nimport { SocketApi } from '@src/api/SocketApi/SocketApi';\r\nimport { IComplaintMessage } from '@src/api/Complaints/models';\r\n\r\ninterface IProps {\r\n  message: IMessage | IComplaintMessage;\r\n}\r\n\r\nexport const Message: FC<IProps> = ({ message }) => {\r\n  const { user } = useAuth();\r\n  const refContainer = useRef<HTMLDivElement | null>(null);\r\n  const deleteModal = useModalControls();\r\n  const dropdown = useModalControls();\r\n\r\n  const isOwn = useMemo(() => message.user.id === user?.id, [message, user]);\r\n\r\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if ('dialogId' in message) {\r\n      e.preventDefault();\r\n      if (isOwn) {\r\n        dropdown.open();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if ('dialogId' in message) {\r\n      SocketApi.deleteMessage({ messageId: message.id });\r\n      deleteModal.close()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ST.Wrapper isOwn={isOwn}>\r\n      <ST.Content ref={refContainer} isOwn={isOwn} onContextMenu={handleClick}>\r\n        <ST.Text>{message.text}</ST.Text>\r\n        <ST.Date>{getTimeMessage(message.updatedAt)}</ST.Date>\r\n        {dropdown.isOpen && (\r\n          <ST.StyledDropDown\r\n            selectionContainer={refContainer.current as HTMLDivElement}\r\n            onClose={dropdown.close}\r\n          >\r\n            <Button variant={ButtonVariant.DANGER} text=\"Удалить\" fullWidth onClick={deleteModal.open} />\r\n          </ST.StyledDropDown>\r\n        )}\r\n      </ST.Content>\r\n      {deleteModal.isOpen && (\r\n        <Dialog\r\n          type={DialogTypes.WARNING}\r\n          closeHandler={deleteModal.close}\r\n          onConfirm={handleDelete}\r\n          actions={{\r\n            cancel: {\r\n              text: 'Отменить',\r\n              onClick: deleteModal.close,\r\n            },\r\n            submit: {\r\n              text: 'Удалить',\r\n            }\r\n          }}\r\n        >\r\n          Вы действительно хотите удалить сообщение?\r\n        </Dialog>\r\n      )}\r\n    </ST.Wrapper>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  grid-row-gap: 24px;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 24px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  border: 1px solid ${COLORS.lightGray40};\r\n  background: ${COLORS.white};\r\n  border-radius: 5px;\r\n`;\r\n\r\nexport const ScrollableContent = styled.div<{ hasActive?: boolean }>`\r\n  max-width: ${({ hasActive }) => hasActive ? '400px' : '100%'};\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n  }\r\n`;\r\n\r\nexport const DialogsContainer = styled.div<{ hasActive?: boolean }>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: ${({ hasActive }) => hasActive ? '400px' : '100%'};\r\n  width: 100%;\r\n  min-height: 100%;\r\n  height: fit-content;\r\n  border-right: ${({ hasActive }) => hasActive ? `1px solid ${COLORS.lightGray40}` : 'none'};\r\n  background: ${COLORS.white};\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const EmptyText = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\nimport { TextShorter } from '@src/components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  gap: 12px;\r\n  cursor: pointer;\r\n  height: fit-content;\r\n  transition: background-color .3s;\r\n  padding: 10px;\r\n  overflow: hidden;\r\n  \r\n  &:hover {\r\n    background-color: ${COLORS.blue20};\r\n  }\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 5px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  gap: 5px;\r\n`;\r\n\r\nexport const Text = styled(TextShorter)`\r\n  white-space: nowrap;\r\n  color: ${COLORS.gray90};\r\n  min-width: 0;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const NewMessages = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 20px;\r\n  min-width: 20px;\r\n  height: 20px;\r\n  min-height: 20px;\r\n  background-color: ${COLORS.blue60};\r\n  color: ${COLORS.white};\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const Title = styled(TextShorter)`\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const Date = styled.div`\r\n  color: ${COLORS.gray90};\r\n  white-space: nowrap;\r\n`;\r\n","import { FC } from 'react';\r\nimport { IDialogListItem } from '@src/api/Dialogs/models';\r\nimport * as ST from './styled';\r\nimport { Avatar, AvatarSize, TextShorter } from '@src/components';\r\nimport { getTimeMessage } from '@src/utils/date';\r\n\r\ninterface IProps {\r\n  dialog: IDialogListItem;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const DialogItem: FC<IProps> = ({ dialog, onClick }) => {\r\n  return (\r\n    <ST.Wrapper onClick={onClick}>\r\n      <Avatar\r\n        userId={dialog.user.id}\r\n        firstName={dialog.user.firstName}\r\n        lastName={dialog.user.lastName}\r\n        src={dialog.user.avatar}\r\n        size={AvatarSize.XXXL}\r\n      />\r\n      <ST.Content>\r\n        <ST.Header>\r\n          <ST.Title tooltip>\r\n            {dialog.user.lastName} {dialog.user.firstName} ({dialog.user.email})\r\n          </ST.Title>\r\n\r\n          <ST.Date>\r\n            {getTimeMessage(dialog.lastMessage.updatedAt)}\r\n          </ST.Date>\r\n        </ST.Header>\r\n        <ST.Header>\r\n          <ST.Text>\r\n            {dialog.lastMessage.text}\r\n          </ST.Text>\r\n          {Boolean(dialog.unreadableMessages) && (\r\n            <ST.NewMessages>\r\n              {dialog.unreadableMessages}\r\n            </ST.NewMessages>\r\n          )}\r\n        </ST.Header>\r\n      </ST.Content>\r\n    </ST.Wrapper>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { COLORS } from '@src/utils/colors';\r\nimport { Icon } from '@components/Icon';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n  width: 100%;\r\n  height: fit-content;\r\n  min-height: 100%;\r\n  padding: 10px;\r\n`;\r\n\r\nexport const NewMessage = styled.div`\r\n  position: absolute;\r\n  cursor: pointer;\r\n  bottom: 20px;\r\n  left: calc(50% - 69px);\r\n  display: flex;\r\n  padding: 4px 8px;\r\n  border-radius: 5px;\r\n  color: ${COLORS.lightGray10};\r\n  background-color: ${COLORS.blue60};\r\n  \r\n  &:hover {\r\n    background-color: ${COLORS.blue70};\r\n  }\r\n\r\n  &:active,\r\n  &.active {\r\n    background-color: ${COLORS.blue80};\r\n  }\r\n`;\r\n\r\nexport const NewMessageWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const ScrollableContent = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 0;\r\n  }\r\n`;\r\n\r\nexport const Footer = styled.form`\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-top: 1px solid ${COLORS.lightGray40};\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  background: transparent;\r\n`;\r\n\r\nexport const SendIcon = styled(Icon)`\r\n  cursor: pointer;\r\n  color: ${COLORS.gray60};\r\n  transition: color .3s;\r\n  \r\n  &:hover {\r\n    color: ${COLORS.blue60};\r\n  }\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid ${COLORS.lightGray40};\r\n  box-shadow: 0 7px 15px rgba(0,0,0,.05);\r\n`;\r\n","import { FC, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\r\nimport { IUser } from '@src/api/Users/models';\r\nimport * as ST from './styled';\r\nimport { AppLoader, Avatar, AvatarSize, Button, Textarea } from '@src/components';\r\nimport { Icon, IconSize } from '@components/Icon';\r\nimport { IDeleteMessage, IMessage, ISocketMessage } from '@src/api/Dialogs/models';\r\nimport { toastError } from '@src/utils/toast';\r\nimport { DialogsApi } from '@src/api/Dialogs/DialogsApi';\r\nimport { Message } from '@pages/Dialogs/Message';\r\nimport { SocketApi } from '@src/api/SocketApi/SocketApi';\r\nimport { MessageEvents } from '@src/api/SocketApi/models';\r\nimport { useMessageCallBack } from '@src/hooks';\r\nimport { useAuth } from '@providers/AuthProvider';\r\nimport { useFormik } from 'formik';\r\n\r\ninterface IProps {\r\n  dialogId: string;\r\n  user: IUser;\r\n  onBack?: () => void;\r\n}\r\n\r\nexport const ActiveDialog: FC<IProps> = ({ dialogId, user, onBack }) => {\r\n  const { user: currentUser } = useAuth();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [messages, setMessages] = useState<IMessage[]>([]);\r\n  const scrollRef = useRef<HTMLDivElement | null>(null);\r\n  const [showNewMessage, setShowNewMessage] = useState(false);\r\n  const form = useFormik({\r\n    initialValues: {\r\n      message: ''\r\n    },\r\n    onSubmit: (values) => {\r\n      onSend(values.message)\r\n    }\r\n  });\r\n\r\n  const onSend = (message: string) => {\r\n    SocketApi.sendMessage({\r\n      dialogId,\r\n      text: message,\r\n    });\r\n    form.resetForm();\r\n  }\r\n\r\n  const getDialog = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const res = await DialogsApi.fetchDialogInfo(dialogId);\r\n\r\n      setMessages(res.data.messages);\r\n    } catch (e) {\r\n      toastError(e);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  useMessageCallBack((message: string) => {\r\n    const parsedMessage = JSON.parse(message) as ISocketMessage;\r\n\r\n    if (parsedMessage.event === MessageEvents.MESSAGE && parsedMessage.dialogId === dialogId) {\r\n      setMessages(prev => [...prev, parsedMessage]);\r\n\r\n      if (parsedMessage.user.id !== currentUser?.id) {\r\n        SocketApi.readMessage({ messageId: parsedMessage.id });\r\n        if (scrollRef.current) {\r\n          const scroll = scrollRef.current?.scrollHeight - scrollRef.current?.clientHeight - scrollRef.current?.scrollTop\r\n          if (scroll >= 50) {\r\n            setShowNewMessage(true)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (parsedMessage.event === MessageEvents.DELETE_MESSAGE) {\r\n      const parsedMessage = JSON.parse(message) as IDeleteMessage;\r\n\r\n      if (parsedMessage.dialogId === dialogId) {\r\n        setMessages(prev => prev.filter(it => it.id !== parsedMessage.messageId));\r\n      }\r\n    }\r\n  }, [dialogId, currentUser]);\r\n\r\n  const scrollToBottom = () => {\r\n    scrollRef.current?.scrollTo(0, scrollRef.current?.scrollHeight)\r\n  }\r\n\r\n  const handleScroll = () => {\r\n    if (scrollRef.current) {\r\n      const scroll = scrollRef.current?.scrollHeight - scrollRef.current?.clientHeight - scrollRef.current?.scrollTop\r\n\r\n      if (scroll < 25) {\r\n        setShowNewMessage(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    if (scrollRef.current) {\r\n      const lastMsg = messages[messages.length - 1];\r\n      const scroll = scrollRef.current?.scrollHeight - scrollRef.current?.clientHeight - scrollRef.current?.scrollTop;\r\n\r\n      if (lastMsg && lastMsg.user.id === currentUser?.id) {\r\n        scrollToBottom()\r\n      } else if (scroll < 50) {\r\n        scrollToBottom()\r\n      }\r\n    }\r\n\r\n  }, [messages]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!isLoading) {\r\n      scrollToBottom()\r\n    }\r\n  }, [isLoading]);\r\n\r\n  useEffect(() => {\r\n    getDialog();\r\n  }, [dialogId]);\r\n\r\n  const renderedContent = useMemo(() => {\r\n    if (isLoading) {\r\n      return <AppLoader/>\r\n    }\r\n\r\n    if (!messages.length) {\r\n      return 'Нет сообщений'\r\n    }\r\n\r\n    return messages.map((it) => <Message key={it.id} message={it} />)\r\n  }, [messages, isLoading]);\r\n\r\n  return (\r\n    <ST.Wrapper>\r\n      <ST.Header>\r\n        {onBack && (\r\n          <Button onClick={onBack}>\r\n            <Icon type=\"arrow-left\" />\r\n          </Button>\r\n        )}\r\n        <Avatar\r\n          userId={user.id}\r\n          firstName={user.firstName}\r\n          size={AvatarSize.XXXL}\r\n          lastName={user.lastName}\r\n          src={user.avatar}\r\n        />\r\n        <ST.Title>{user.lastName} {user.firstName} ({user.email})</ST.Title>\r\n      </ST.Header>\r\n      <ST.NewMessageWrapper>\r\n        <ST.ScrollableContent\r\n          ref={scrollRef}\r\n          onScroll={handleScroll}\r\n        >\r\n          <ST.Content>\r\n            {renderedContent}\r\n          </ST.Content>\r\n        </ST.ScrollableContent>\r\n        {showNewMessage && (\r\n          <ST.NewMessage onClick={scrollToBottom}>\r\n            Новое сообщение\r\n          </ST.NewMessage>\r\n        )}\r\n      </ST.NewMessageWrapper>\r\n\r\n      <ST.Footer onSubmit={form.handleSubmit}>\r\n        <Textarea\r\n          name=\"message\"\r\n          value={form.values.message}\r\n          onChange={form.handleChange}\r\n          placeholder=\"Введите сообщение\"\r\n          onEnter={() => onSend(form.values.message)}\r\n        />\r\n        <ST.StyledButton>\r\n          <ST.SendIcon type=\"send\" size={IconSize.XL} />\r\n        </ST.StyledButton>\r\n      </ST.Footer>\r\n    </ST.Wrapper>\r\n  );\r\n}\r\n","import { ChangeEventHandler, FC, useEffect, useMemo, useState } from 'react';\r\nimport * as ST from './styled';\r\nimport { AppLoader, PageHeader } from '@src/components';\r\nimport { IDeleteMessage, IDialogListItem, ISocketMessage } from '@src/api/Dialogs/models';\r\nimport { toastError } from '@src/utils/toast';\r\nimport { DialogsApi } from '@src/api/Dialogs/DialogsApi';\r\nimport { useDebounce, useMessageCallBack, useWindowWidth } from '@src/hooks';\r\nimport { DialogItem } from '@pages/Dialogs/DialogItem';\r\nimport { useDialogsContext } from '@providers/DialogsProvider/DialogsContext';\r\nimport { ActiveDialog } from '@pages/Dialogs/ActiveDialog';\r\nimport { useAuth } from '@providers/AuthProvider';\r\nimport { MessageEvents } from '@src/api/SocketApi/models';\r\n\r\nconst Posts: FC = () => {\r\n  const { user } = useAuth();\r\n  const { newDialog, clearNewDialog, activeDialog, setActiveDialog } = useDialogsContext();\r\n  const [dialogs, setDialogs] = useState<IDialogListItem[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [search, setSearch] = useState('');\r\n  const debouncedSearch = useDebounce(search, 400);\r\n  const windowWidth = useWindowWidth();\r\n\r\n  useEffect(() => {\r\n    if (newDialog) {\r\n      const activeUser = newDialog.users.find(it => it.id !== user?.id);\r\n\r\n      if (activeUser) {\r\n        setActiveDialog({\r\n          id: newDialog.id,\r\n          user: activeUser,\r\n        });\r\n      }\r\n\r\n      clearNewDialog();\r\n    }\r\n  }, [newDialog]);\r\n\r\n  const handleChangeSearch: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const getDialogs = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const res = await DialogsApi.fetchDialogs();\r\n\r\n      setDialogs(res.data);\r\n    } catch (e) {\r\n      toastError(e);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getDialogs()\r\n  }, [debouncedSearch]);\r\n\r\n  const handleBack = () => {\r\n    setActiveDialog(undefined);\r\n    getDialogs();\r\n  }\r\n\r\n  const showDialogs = useMemo(() => {\r\n    return windowWidth > 1010;\r\n  }, [windowWidth]);\r\n\r\n  const handleClickDialog = (dialog: IDialogListItem) => {\r\n    setActiveDialog(dialog);\r\n    setDialogs(prev => prev.map(it => {\r\n      if (it.id === dialog.id) {\r\n        it.unreadableMessages = 0;\r\n      }\r\n      return { ...it };\r\n    }))\r\n  }\r\n\r\n  useMessageCallBack((message: string) => {\r\n    const parsedMessage = JSON.parse(message) as ISocketMessage;\r\n\r\n    if (parsedMessage.event === MessageEvents.MESSAGE) {\r\n      if (!dialogs.find(it => it.id === parsedMessage.dialogId)) {\r\n        setDialogs(prev => [{ id: parsedMessage.dialogId, user: parsedMessage.user, unreadableMessages: 1, lastMessage: parsedMessage }, ...prev])\r\n      } else {\r\n        setDialogs(prev => prev.map(it => {\r\n          if (it.id === parsedMessage.dialogId && user?.id !== parsedMessage.user.id) {\r\n            if (activeDialog?.id !== parsedMessage.dialogId) {\r\n              it.unreadableMessages += 1;\r\n            }\r\n            it.lastMessage = parsedMessage;\r\n          }\r\n\r\n          if (it.id === parsedMessage.dialogId && user?.id === parsedMessage.user.id) {\r\n            it.lastMessage = { ...parsedMessage, read: true };\r\n          }\r\n          return { ...it };\r\n        }).sort((a, b) => Date.parse(b.lastMessage.updatedAt) - Date.parse(a.lastMessage.updatedAt)))\r\n      }\r\n    }\r\n\r\n    if (parsedMessage.event === MessageEvents.DELETE_MESSAGE) {\r\n      const parsedMessage = JSON.parse(message) as IDeleteMessage;\r\n\r\n      setDialogs(prev => prev.map(it => {\r\n        if (it.id === parsedMessage.dialogId) {\r\n          return {\r\n            ...it,\r\n            lastMessage: parsedMessage.lastMessage,\r\n          }\r\n        }\r\n\r\n        return it;\r\n      }))\r\n    }\r\n  }, [dialogs, user]);\r\n\r\n  const renderedDialogs = useMemo(() => {\r\n    if (isLoading) {\r\n      return (\r\n        <AppLoader />\r\n      )\r\n    }\r\n\r\n    if (!dialogs.length) {\r\n      return (\r\n        <ST.EmptyText>\r\n          Диалогов нет\r\n        </ST.EmptyText>\r\n      );\r\n    }\r\n\r\n    if (activeDialog) {\r\n      return (\r\n        <ST.Content>\r\n          {showDialogs && (\r\n            <ST.ScrollableContent hasActive>\r\n              <ST.DialogsContainer hasActive>\r\n                {dialogs.map(it => <DialogItem key={it.id} dialog={it} onClick={() => handleClickDialog(it)} />)}\r\n              </ST.DialogsContainer>\r\n            </ST.ScrollableContent>\r\n          )}\r\n          <ActiveDialog dialogId={activeDialog.id} user={activeDialog.user} onBack={showDialogs ? undefined : handleBack} />\r\n        </ST.Content>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ST.Content>\r\n        <ST.ScrollableContent>\r\n          <ST.DialogsContainer>\r\n            {dialogs.map(it => <DialogItem key={it.id} dialog={it} onClick={() => handleClickDialog(it)} />)}\r\n          </ST.DialogsContainer>\r\n        </ST.ScrollableContent>\r\n      </ST.Content>\r\n    )\r\n  }, [dialogs, isLoading, activeDialog, showDialogs]);\r\n\r\n  return (\r\n    <ST.Wrapper>\r\n      <PageHeader title=\"Диалоги\" search={search} onChangeSearch={handleChangeSearch} />\r\n      {renderedDialogs}\r\n    </ST.Wrapper>\r\n  )\r\n}\r\n\r\nexport default Posts;\r\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","_ref","isOwn","Content","_templateObject2","_ref2","COLORS","StyledDropDown","Dropdown","_templateObject3","Text","_templateObject4","Date","_templateObject5","Message","message","user","useAuth","refContainer","useRef","deleteModal","useModalControls","dropdown","useMemo","id","_jsxs","ST","children","ref","onContextMenu","e","preventDefault","open","_jsx","text","getTimeMessage","updatedAt","isOpen","selectionContainer","current","onClose","close","Button","variant","ButtonVariant","fullWidth","onClick","Dialog","type","DialogTypes","closeHandler","onConfirm","SocketApi","messageId","actions","cancel","submit","ScrollableContent","hasActive","DialogsContainer","_ref3","concat","EmptyText","Header","TextShorter","NewMessages","Title","_templateObject6","_templateObject7","DialogItem","dialog","Avatar","userId","firstName","lastName","src","avatar","size","AvatarSize","tooltip","email","lastMessage","Boolean","unreadableMessages","NewMessage","NewMessageWrapper","Footer","StyledButton","SendIcon","Icon","_templateObject8","_templateObject9","_templateObject10","ActiveDialog","dialogId","onBack","currentUser","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","messages","setMessages","scrollRef","_useState5","_useState6","showNewMessage","setShowNewMessage","form","useFormik","initialValues","onSubmit","values","onSend","resetForm","getDialog","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","DialogsApi","sent","data","t0","toastError","finish","stop","apply","arguments","useMessageCallBack","_scrollRef$current","_scrollRef$current2","_scrollRef$current3","parsedMessage","JSON","parse","event","MessageEvents","_toConsumableArray","scrollHeight","clientHeight","scrollTop","filter","it","scrollToBottom","_scrollRef$current4","_scrollRef$current5","scrollTo","useLayoutEffect","_scrollRef$current9","_scrollRef$current10","_scrollRef$current11","lastMsg","length","scroll","useEffect","renderedContent","AppLoader","map","onScroll","_scrollRef$current6","_scrollRef$current7","_scrollRef$current8","handleSubmit","Textarea","name","value","onChange","handleChange","placeholder","onEnter","IconSize","_useDialogsContext","useDialogsContext","newDialog","clearNewDialog","activeDialog","setActiveDialog","dialogs","setDialogs","search","setSearch","debouncedSearch","useDebounce","windowWidth","useWindowWidth","activeUser","users","find","getDialogs","handleBack","undefined","showDialogs","handleClickDialog","_objectSpread","read","sort","a","b","renderedDialogs","PageHeader","title","onChangeSearch","target"],"sourceRoot":""}